{
	// Place your GamblerMod workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"power template": {
		"scope": "java",
		"prefix": "newPower",
		"body": [
			"package GamblerMod.powers;"

			"\nimport com.megacrit.cardcrawl.core.AbstractCreature;"
			"import com.megacrit.cardcrawl.powers.AbstractPower;"
			"import static GamblerMod.GamblerMod.makeID;"

			"\npublic class $0 extends BasePower{"
				"\tpublic static final String POWER_ID = makeID(\"$0\");"
				"\tprivate static final AbstractPower.PowerType TYPE = AbstractPower.PowerType.?;"
				"\tprivate static final boolean TURN_BASED = ?;"

				"\n\tpublic $0(AbstractCreature owner, int amount) {"
					"\t\tsuper(POWER_ID, TYPE, TURN_BASED, owner, amount);"
				"\t}"

				"\n\tpublic void updateDescription() {"
					"\t\tthis.description = DESCRIPTIONS[0];"
				"\t}"
			"}"

		],
		"description": "default power template"
	},
	"card template": {
		"scope": "java",
		"prefix": "newCard",
		"body": [
			"package GamblerMod.cards;"

			"\nimport com.megacrit.cardcrawl.characters.AbstractPlayer;"
			"import com.megacrit.cardcrawl.monsters.AbstractMonster;"
			"import GamblerMod.character.Gambler;"
			"import GamblerMod.util.CardStats;"

			"\npublic class $0 extends BaseCard{"
				"\tprivate static final int DAMAGE = 0;"
				"\tprivate static final int UPG_DAMAGE = 0;"
				"\tprivate static final int BLOCK = 0;"
				"\tprivate static final int UPG_BLOCK = 0;"
				"\tprivate static final int MAGIC = 0;"
				"\tprivate static final int UPG_MAGIC = 0;"

				"\n\tpublic static final String ID = makeID($0.class.getSimpleName());"
				"\tprivate static final CardStats info = new CardStats("
					"\t\tGambler.Enums.CARD_COLOR, "
					"\t\tCardType.?,"
					"\t\tCardRarity.?,"
					"\t\tCardTarget.?,"
					"\t\t?"
				"\t);"

				"\n\tpublic $0() {"
					"\t\tsuper(ID, info);"
					"\t\tsetDamage(DAMAGE, UPG_DAMAGE); "
					"\t\tsetBlock(BLOCK, UPG_BLOCK);"
					"\t\tsetMagic(MAGIC, UPG_MAGIC);"
				"\t}"

				"\n\t@Override"
				"\tpublic void use(AbstractPlayer p, AbstractMonster m) {"
					"\t"
				"\t}"

			"}"
		],
		"description": "default card template"
	},
	"action template": {
		"scope": "java",
		"prefix": "newAction",
		"body": [
			"package GamblerMod.actions;"

			"\nimport com.megacrit.cardcrawl.actions.AbstractGameAction;"
			"import com.megacrit.cardcrawl.cards.AbstractCard;"
			"import com.megacrit.cardcrawl.dungeons.AbstractDungeon;"

			"\npublic class $0 extends AbstractGameAction{"
				"\tpublic $0() {"
					"\t\tsuper();"
				"\t}"

				"\t\npublic void update() {"
					
					"\n\t\tthis.isDone = true;"
				"\t}"
			"}"

		],
		"description": "default action template"
	}
}